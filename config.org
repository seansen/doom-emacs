#+STARTUP: content
* MY DOOM CONFIG

** Basics
*** User
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Sean Avery"
      user-mail-address "seanal@gmx.de")
#+END_SRC

*** Styles
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 14))
(setq doom-theme 'doom-gruvbox)
;;(setq fancy-splash-image "~/image.png")
#+END_SRC

*** Settings
#+BEGIN_SRC emacs-lisp
(setq org-support-shift-select t)
(setq display-line-numbers-type 'relative)
(setq evil-move-cursor-back nil)
(setq evil-escape-key-sequence "jk"
      evil-escape-delay 0.3)
(custom-set-faces! '(doom-modeline-evil-insert-state :weight bold :foreground "#339CDB"))

(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      inhibit-compacting-font-caches t)           ; When there are lots of glyphs, keep them in memory

(delete-selection-mode 1)                         ; Replace selection when inserting text
(display-time-mode 1)                             ; Enable time in the mode-line
(display-battery-mode 1)                          ; On laptops it's nice to know how much power you have
(global-subword-mode 1)                           ; Iterate through CamelCase words
#+END_SRC

*** Buffer default
#+BEGIN_SRC emacs-lisp
 (setq-default major-mode 'org-mode)
#+End_SRC
*** Fullscreen
#+BEGIN_SRC emacs-lisp
;;(if (eq initial-window-system 'x)                 ; if started by emacs command or desktop file
;;    (toggle-frame-maximized)
;;  (toggle-frame-fullscreen))
#+END_SRC
*** WindowsSplit
#+BEGIN_SRC emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))

(setq +ivy-buffer-preview t)
#+END_SRC
*** SplasScreen
;;#+BEGIN_SRC emacs-lisp
(defvar fancy-splash-image-template
  (expand-file-name "~/.doom.d/blackhole-lines-template.svg" doom-private-dir)
  "Default template svg used for the splash image, with substitutions from ")
(defvar fancy-splash-image-nil
  (expand-file-name "~/.doom.d/blackhole-lines-template.png" doom-private-dir)
  "An image to use at minimum size, usually a transparent pixel")

(setq fancy-splash-sizes
  `((:height 500 :min-height 50 :padding (0 . 4) :template ,(expand-file-name "misc/splash-images/blackhole-lines-0.svg" doom-private-dir))
    (:height 440 :min-height 42 :padding (1 . 4) :template ,(expand-file-name "misc/splash-images/blackhole-lines-0.svg" doom-private-dir))
    (:height 400 :min-height 38 :padding (1 . 4) :template ,(expand-file-name "misc/splash-images/blackhole-lines-1.svg" doom-private-dir))
    (:height 350 :min-height 36 :padding (1 . 3) :template ,(expand-file-name "misc/splash-images/blackhole-lines-2.svg" doom-private-dir))
    (:height 300 :min-height 34 :padding (1 . 3) :template ,(expand-file-name "misc/splash-images/blackhole-lines-3.svg" doom-private-dir))
    (:height 250 :min-height 32 :padding (1 . 2) :template ,(expand-file-name "misc/splash-images/blackhole-lines-4.svg" doom-private-dir))
    (:height 200 :min-height 30 :padding (1 . 2) :template ,(expand-file-name "misc/splash-images/blackhole-lines-5.svg" doom-private-dir))
    (:height 100 :min-height 24 :padding (1 . 2) :template ,(expand-file-name "misc/splash-images/emacs-e-template.svg" doom-private-dir))
    (:height 0   :min-height 0  :padding (0 . 0) :file ,fancy-splash-image-nil)))

(defvar fancy-splash-sizes
  `((:height 500 :min-height 50 :padding (0 . 2))
    (:height 440 :min-height 42 :padding (1 . 4))
    (:height 330 :min-height 35 :padding (1 . 3))
    (:height 200 :min-height 30 :padding (1 . 2))
    (:height 0   :min-height 0  :padding (0 . 0) :file ,fancy-splash-image-nil))
  "list of plists with the following properties
  :height the height of the image
  :min-height minimum `frame-height' for image
  :padding `+doom-dashboard-banner-padding' to apply
  :template non-default template file
  :file file to use instead of template")

(defvar fancy-splash-template-colours
  '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8))
  "list of colour-replacement alists of the form (\"$placeholder\" . 'theme-colour) which applied the template")

(unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))
  (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))

(defun fancy-splash-filename (theme-name height)
  (expand-file-name (concat (file-name-as-directory "theme-splashes")
                            (symbol-name doom-theme)
                            "-" (number-to-string height) ".svg")
                    doom-cache-dir))

(defun fancy-splash-clear-cache ()
  "Delete all cached fancy splash images"
  (interactive)
  (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)
  (message "Cache cleared!"))

(defun fancy-splash-generate-image (template height)
  "Read TEMPLATE and create an image if HEIGHT with colour substitutions as  ;described by `fancy-splash-template-colours' for the current theme"
    (with-temp-buffer
      (insert-file-contents template)
      (re-search-forward "$height" nil t)
      (replace-match (number-to-string height) nil nil)
      (dolist (substitution fancy-splash-template-colours)
        (beginning-of-buffer)
        (while (re-search-forward (car substitution) nil t)
          (replace-match (doom-color (cdr substitution)) nil nil)))
      (write-region nil nil
                    (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))

(defun fancy-splash-generate-images ()
  "Perform `fancy-splash-generate-image' in bulk"
  (dolist (size fancy-splash-sizes)
    (unless (plist-get size :file)
      (fancy-splash-generate-image (or (plist-get size :file)
                                       (plist-get size :template)
                                       fancy-splash-image-template)
                                   (plist-get size :height)))))

(defun ensure-theme-splash-images-exist (&optional height)
  (unless (file-exists-p (fancy-splash-filename
                          (symbol-name doom-theme)
                          (or height
                              (plist-get (car fancy-splash-sizes) :height))))
    (fancy-splash-generate-images)))

(defun get-appropriate-splash ()
  (let ((height (frame-height)))
    (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))
             fancy-splash-sizes)))

(setq fancy-splash-last-size nil)
(setq fancy-splash-last-theme nil)
(defun set-appropriate-splash (&optional frame)
  (let ((appropriate-image (get-appropriate-splash)))
    (unless (and (equal appropriate-image fancy-splash-last-size)
                 (equal doom-theme fancy-splash-last-theme)))
    (unless (plist-get appropriate-image :file)
      (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))
    (setq fancy-splash-image
          (or (plist-get appropriate-image :file)
              (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))
    (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))
    (setq fancy-splash-last-size appropriate-image)
    (setq fancy-splash-last-theme doom-theme)
    (+doom-dashboard-reload)))

(add-hook 'window-size-change-functions #'set-appropriate-splash)
(add-hook 'doom-load-theme-hook #'set-appropriate-splash)
#+END_SRC
** Plugins
*** Move-Text
#+BEGIN_SRC emacs-lisp
(move-text-default-bindings)
#+END_SRC

*** UndoTree
#+BEGIN_SRC emacs-lis
(global-undo-tree-mode)
#+END_SRC

*** Org-Cliplink
#+BEGIN_SRC emacs-lispk
;;;;(global-set-key (kbd "C-x p i") 'org-cliplink)
#+END_SRC
*** Deorg-roam-ref-capture-templatesft-Nav
#+BEGIN_SRC emacs-lisp
(use-package deft
:after org
:bind
("C-c n d" . deft)
:custom
(deft-recursive t)
(deft-use-filter-string-for-filename t)
(deft-default-extension "org")
(deft-extensions '("txt" "tex" "org"))
(deft-directory "~/Dropbox/zettelkasten"))
#+END_SRC
*** Org
**** Org-Directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")
#+END_SRC
**** Org-Index
[[http://2484.de/org-index.html]]
[[https://github.com/marcIhm/org-index/tree/f868df4aa4f49484cf818627251b7c7282d8d20e][GitHub - marcIhm/org-index at f868df4aa4f49484cf818627251b7c7282d8d20e]]
**** Org-Protocoll
#+BEGIN_SRC emacs-lisp
(use-package org-roam-protocol)
#+END_SRC
**** Evil-Org-Mode
[[https://github.com/edwtjo/evil-org-mode][GitHub - edwtjo/evil-org-mode: Supplemental evil-mode keybindings to emacs or...]]
*** Roam
**** Roam
#+BEGIN_SRC emacs-lisp
(setq org-roam-directory "~/Dropbox/zettelkasten/")
(setq org-roam-buffer-position 'right)
(setq org-roam-buffer-width 0.4)
(setq org-roam-index-file "index.org")
(setq org-roam-completion-system 'ivy)(after! org-roam
(map! :leader
:prefix "n"
:desc "org-roam" "l" #'org-roam
:desc "org-roam-insert" "i" #'org-roam-insert
:desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
:desc "org-roam-find-file" "f" #'org-roam-find-file
:desc "org-roam-show-graph" "g" #'org-roam-show-graph
:desc "org-roam-insert" "i" #'org-roam-insert
:desc "org-roam-capture" "c" #'org-roam-capture
:desc "org-roam-find-directory" "d" #'org-roam-find-directory
:desc "org-roam-company" "k" #'company-org-roam
:desc "org-roam-find-ref" "x" #'org-roam-find-ref
:desc "org-roam-graph" "y" #'org-roam-graph
:desc "org-roam-jump-to-index" "j" #'org-roam-jump-to-index
))
#+END_SRC

**** Roam-Company-Org
Company-org-roam is a company backend for use with org-roam. In Org-roam buffers, it provides completion for Org-roam files using its title.\\
[[https://github.com/org-roam/company-org-roam/tree/674c2bd493f571c5323d69279557a6c18ccbd14e][GitHub - org-roam/company-org-roam at 674c2bd493f571c5323d69279557a6c18ccbd14e]]
#+BEGIN_SRC emacs-lisp
(require 'company-org-roam)
(use-package company-org-roam
:when (featurep! :completion company)
:after org-roam
:config
(set-company-backend! 'org-mode '(company-org-roam company-yasnippet company-dabbrev)))

(use-package! org-roam-server)
#+END_SRC
**** Company
#+BEGIN_SRC emacs-lisp
;;(use-package! company-org-roam
;;  :config
;;  (push 'company-org-roam company-backends))
#+END_SRC
** Properties
*** Properties ‘CreateDate, UpdateDate’
#+BEGIN_SRC emacs-lisp
  (defun zp/org-find-time-file-property (property &optional anywhere)
    "Return the position of the time file PROPERTY if it exists.
When ANYWHERE is non-nil, search beyond the preamble."
    (save-excursion
      (goto-char (point-min))
      (let ((first-heading
             (save-excursion
               (re-search-forward org-outline-regexp-bol nil t))))
        (when (re-search-forward (format "^#\\+%s:" property)
                                 (if anywhere nil first-heading)
                                 t)
          (point)))))

  (defun zp/org-has-time-file-property-p (property &optional anywhere)
    "Return the position of time file PROPERTY if it is defined.
As a special case, return -1 if the time file PROPERTY exists but
is not defined."
    (when-let ((pos (zp/org-find-time-file-property property anywhere)))
      (save-excursion
        (goto-char pos)
        (if (and (looking-at-p " ")
                 (progn (forward-char)
                        (org-at-timestamp-p 'lax)))
            pos
          -1))))

  (defun zp/org-set-time-file-property (property &optional anywhere pos)
    "Set the time file PROPERTY in the preamble.
When ANYWHERE is non-nil, search beyond the preamble.
If the position of the file PROPERTY has already been computed,
it can be passed in POS."
    (when-let ((pos (or pos
                        (zp/org-find-time-file-property property))))
      (save-excursion
        (goto-char pos)
        (if (looking-at-p " ")
            (forward-char)
          (insert " "))
        (delete-region (point) (line-end-position))
        (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
          (insert now)))))

  (defun zp/org-set-last-modified ()
    "Update the LAST_MODIFIED file property in the preamble."
    (when (derived-mode-p 'org-mode)
      (zp/org-set-time-file-property "LAST_MODIFIED")))
#+END_SRC

** Templates
#+BEGIN_SRC emacs-lisp
(setq org-roam-capture-templates
'(
  ("d" "default" plain (function org-roam--capture-get-point)
   "%?"
    :file-name "%(format-time-string \"%Y%m%d%H%M%S-${slug}\" (current-time) t)"
    :head "#+TITLE: ${title}\n#+Author: Sean Averhoff\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n- tags :: \n----------\n"
        :unnarrowed t)

  ("n" "note" plain (function org-roam--capture-get-point)
  "%?"
    :file-name  "%(format-time-string \"%Y%m%d%H%M%S-${slug}\" (current-time) t)"
    :head "#+TITLE: ${title}\n#+Author: Sean Averhoff\n#+CREATED: %U\n#+LAST_MODIFIED: %U\n- tags :: \n----------\n"
    :unnarrowed t)

  ("p" "private" plain (function org-roam--capture-get-point)
  "%?"
    :file-name "private-${slug}"
    :head "#+TITLE: ${title}\n#+Author: ${author-or-editor}"
    :unnarrowed t)))

#+END_SRC

** Server etc
#+BEGIN_SRC emacs-lisp
(setq +mu4e-backend 'offlineimap)

#+END_SRC

** Beta
** Plugins
*** Org
*** Roam
*** Roam
*** Roam
*** Roam
*** Roam
*** Roam
